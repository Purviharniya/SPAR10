# -*- coding: utf-8 -*-
"""spar10-Redaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nG5D5uPSanDR7bClaGgjH99qiNTWlYoR

# **SPAR10: Redaction**

### Installing the required libraries
"""
# python -m spacy download en # use this to download spacy en package
# pip install PyMuPDF==1.16.14

# pip install aspose.words

"""### Importing the required libraries"""

# NLP libraries

import spacy
from spacy import displacy
nlp = spacy.load('en_core_web_sm')

# Time Pkg
import time
timestr = time.strftime("%Y%m%d-%H%M%S")

# for opening pdf
import fitz

# for dealing for docx
import aspose.words as aw

# fr ignoring warnings
import warnings
warnings.filterwarnings('ignore')

import re

"""# CODE"""

def get_sensitive_data(lines,tt):
	
  docx = nlp(lines)
  redacted_sentences = []
  with docx.retokenize() as retokenizer:
    for ent in docx.ents:
      retokenizer.merge(ent)
  for token in docx:
    if token.ent_type_ == tt:
      # print(token) #to see the output
      yield token.text

def get_email_addresses(string):
  r = re.compile(r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$')
  return r.findall(string)

def get_dates(string):
  # mm/dd/yyyy or mm-dd-yyyy or mm.dd.yyyy
  # r1 = r'^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$'
  # # dd/mm/yyyy, dd-mm-yyyy or dd.mm.yyyy
  # r2 = r'^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$'
  #yyyy-mm-dd
  r3 = r'\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])*'
  #string dates like January 21, 2020 are left
  generic_re = re.compile("(%s)" % (r3))

  return generic_re.findall(string)

def get_path():

  # replace it with name of the pdf file
  path = "C:/Users/User/projects/SPAR10/uploads/redaction/testing.pdf"

  if path[-4:]=='docx':
    
    # Load word document
    doc = aw.Document("C:/Users/91720/Desktop/STUDY/NOTES/SEM 7/LY project/Code/SPAR10/uploads/review_summarization/testing.docx")
    # Save as PDF
    doc.save("C:/Users/User/projects/SPAR10/uploads/redaction/testing.pdf")
    path="C:/Users/User/projects/SPAR10/uploads/redaction/testing.pdf"

  return path

def redaction():
	
  """ main redactor code """

  redactables = ['EMAIL','PERSON','GPE','LOC','ORG','TIME','DATE','MONEY','FAC','QUANITY','CARDINAL','ORDINAL']
    
  # get the path of the pdf
  path = get_path()
    
  # opening the pdf
  doc = fitz.open(path)
    
  # iterating through pages
  for page in doc:
    
    # _wrapContents is needed for fixing
    # alignment issues with rect boxes in some
    # cases where there is alignment issue
    page._wrapContents()
    
    for i in redactables:

      # getting the react boxes which consists the matching email regex or the NER's
      
      if i=='EMAIL':
        sensitive = get_email_addresses(page.getText("text"))
      elif i=='DATE':
        sensitive = get_dates(page.getText("text"))
      else:
        sensitive = get_sensitive_data(page.getText("text"),i)
    
      for data in sensitive:
        areas = page.searchFor(data)
          
        # drawing outline over sensitive datas
        [page.addRedactAnnot(area, fill = (0, 0, 0)) for area in areas]
          
        # applying the redaction
        page.apply_redactions()
      
  # saving it to a new pdf
  doc.save('redacted.pdf')
  print("Successfully redacted")

redaction()